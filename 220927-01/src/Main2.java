
public class Main2 {
	public static void main(String[] args) {
		// 자바는 뻣뻣한 언어기 때문에 예외를 꼭 처리하고 넘어가게 만들었는데
		// Checked 인셉션은 무조건 체크하고 넘어가도록 만들었다
		// 보통은 OS 상에 문제가 생길 수 있는, 외부의 자원을 사용하는(네트워크 입출력, 파일 입출력) 문제
		// Exception을 상속하는 예외들은 체크드 예외
		// 근데 헷갈리는게 Exception 예외를 상속받는 런타임 예외가 있는데
		// 런타임 예외를 상속하는 예외들은 언체크드 예외다...!
		// 언체크들은 예외가 발생했더라도 체크 안하고 넘어가도 된다
		// 예외는 로직 짜다가 예외를 알려주고 싶다면 던져서 알려주는 형식으로 활용하면 되는것이고
		// 그냥 지나쳐도 된다면 트라이 캣치로 잡아주면 되는 것
		// fall stack?
		// 호출에 대한 기록이 스택처럼 쌓여있는 것으로
		// e.printstack을 호출하면 메소드가 층층히 출력되는게 스택처럼 순서대로 호출되기 때문
		// 이렇게 순차적으로 되어있는 메소드들을 찾다찾다 못찾으면 거기서 프로그램이 종료되는 것
		
		// OOP? Op?
		// throw로 오류라는 것을 한 곳에서 처리할 수 있게끔 만들 수 있다
		// 예외 구조를 상속적으로 만들 것이니까 타입을 
	}
}
