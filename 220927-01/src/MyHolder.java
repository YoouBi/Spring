
public class MyHolder<T> { //클래스나 인터페이스 옆에 꺽쇄를 적고 알파벳 대문자 1글자를 써준다
	// 보통은 타입의 약자라고 T라고 많이 쓴다
	private T o; // 그리고 타입 부분에 같은 대문자를 써준다
//	private 부모의 타입 o;
//	private 객체 o; // 객체지향을 하다보면 객체를 객체로 감싸는 걸 많이 본 적이 있었을 것이다
	// 이 객체에 의존성을 주입해주고 싶다고 하면 생성자와 세터로 집어넣어줄 수 있다
	// 근데 이 타입에 대해 생각해보자
	// 생성자라 세터로 집어넣으려고 할 때 하나의 클래스로만 정의된 객체라면 다른 타입이 올 수 없다
	// 더 유연하게 만드려면 그 타입을 상속 구조로 만들어두고 부모의 형태로 전달받으면 되겠다
	// 조금 더 유연하게 만드려면 인터페이스 형태로 만들면 되겠다
	// 이렇게 해야되는 이유가 자바에서 타입을 꼭 지켜야하는 제약사항 때문에 유연함이 떨어져서이다
	// 다른 언어 사용할 때 이런 타입에 대해 고민들 덜 해도 되는 친구들이 있었는데
	// 동적인 타이핑을 자바에서도 사용할 수 있지 않을까 하는 아이디어가 '제네릭'이다

	public MyHolder() {
		super();
	}
	
	public MyHolder(T o) {
		super();
		this.o = o;
	}

	public T getO() {
		return o;
	}

	public void setO(T o) {
		this.o = o;
	}
}